# Report

```
1. present an overview of the intended goals of the project and of its main features (this part may include a diagram)
```

## Project Goals and Main Features

This report documents my Data Mining Capstone Project (DMCP). The aim of the DMCP is to lay a foundation for my LUMACSS Capstone Project (LCP), which I intend to pursue in July and August 2023. The goal of the LCP is to create a web app that documents the voting behaviour of Swiss parliamentarians and makes their voting record understandable and accessible to the general public. The idea of the LCP is loosely based on [They Work For You](https://www.theyworkforyou.com/), a website that monitors British parliaments. It aims to increase accountability for politicians in the UK.

How the LCP will display content similar to They Work For You is still to be defined. In this first attempt, the DMCP aims at performing the following two tasks: First, displaying easily understandable summaries of the individual items of business that parliamentarians vote on. Second, categorising and scoring each item of business. The DMCP lays a foundation for the LCP by testing if these tasks can be performed automatically. To limit the scope of the DMCP, this project focuses on items of business that were voted on during a final vote, in the [51st legislative period](https://de.wikipedia.org/wiki/51._Legislaturperiode_der_Schweizer_Bundesversammlung) in the National Council (the lower house of the Swiss Federal Assembly, *Nationalrat* in German). In sum, the DMCP includes 213 parliamentarians [Footnote: The National Council has 200 members. The data set includes 13 additional parliamentarians due to resignations during the legislative period.] and 147 items of business.

The goal of the DMCP is to package the features described above into a working prototype in the form of a Shiny app hosted online. The prototype will then be sent to potential LCP project sponsors to better explain the project’s intent. Project sponsors are people or organisations that have a potential interest in the app that will come out of the LCP.

The DMCP has two main features. The first feature encompasses a complete working pipeline. The pipeline begins with retrieving raw data from the Swiss parliamentary services through the [swissparl](https://github.com/zumbov2/swissparl) R package. The end of the pipeline constitutes a [functioning Shiny web app](https://a88fuu-fabian-aiolfi.shinyapps.io/abstimmungsverhalten/) that displays summaries and scored categorisations of items of business.

The second main feature is the use of OpenAI’s ChatGPT on two different levels. On the first level, ChatGPT’s was used for technical support for writing code in R. The model GPT-4 was used through the browser interface and snippets of code in the scripts produced by ChatGPT [are labelled appropriately](https://github.com/fabianaiolfi/Parliamentarians/blob/main/scripts/03_pre_processing.R#L11). Furthermore, ChatGPT was used to create Shiny web apps from scratch. This is especially noteworthy because I have absolutely no previous knowledge of Shiny web app development and managed to create fully functioning web apps by simply using natural language prompts.

The second level on which ChatGPT was employed was in the generation of content. The OpenAI API was used to create two forms of content by employing the model `gpt-3.5-turbo-0301`. The first are short and concise summaries of items of business in *Leichte Sprache*, a simplified version of the German language. The second form of content is categorising the items of business into 

 was used to generate summaries of items of business as well as classify and score the individual items of business 


- using chatgpt on two different levels
	- technical support, especially creating a shiny web app, which I have no knowledge of (- ChatGPT for technical support and Shiny App: v4)
	- producing content for the web app through the OpenAI API (v3.5)
		- summaries of items of business
		- Classification of items of business in smart spider categories


```
2. list of tasks needed to achieve the goals and the identified technical difficulties. 
```

retrieve data through parliamentary api
- r wrapper used
- problem: lack of documentation from Parliament API
	- could be solved with [website from beni] and through trial and error

run parliamentary data through chatgpt api
- r wrapper
- restrained use of api due to “costs”
- how to query chatgpt properly to get the best results? Compare different queries in order to get the best summary
	- Shiny App: https://a88fuu-fabian-aiolfi.shinyapps.io/ChatGPT_Output_Evaluation/


```
3. review how the activities actually unfolded and the difficulties that were encountered during the project. 
```
- When querying smartvote values: Returns unstructured output which has to be converted into structured data
- when creating final web app: explaining sorting logic to chatgpt became difficult, which created lots of bugs (link to correct line in documentation)


```
4. present how the contribution/application worked out in practice, showing what has been achieved and what could not be achieved (in the latter case, identify the causes of the impossibility to achieve a feature). 
```

- Voting record with summary and smart spider category values
	- Shiny App: https://a88fuu-fabian-aiolfi.shinyapps.io/abstimmungsverhalten/

- describe functionality: if sorted by a category, the items of business are sorted by smart spider scores

- working prototype could be set up and can be used to demonstrate what I aim at with my lumacss capstone project
- prototype shows that with relatively small amount of code and very little financial resources, a lot of content can be produced and can be displayed in an appealing manner
- the functioning shiny web app, despite its flaws and rudimentary user interface, provides a good feeling of the quality that the OpenAI API can produce

- unclear how to evaluate the output generated by the OpenAI API
	- Generated Summary
		- Which summary query was the best / most adequat?
	- Smart Spider Category Values
		- eyeball the results, sample all 8 categories
		- Is a direct comparison with current smart spider possible?
			- possible comparison: compare parliamentarian profile with with an average of their voting history? → file under possible future work
		- Is there a correlation between Yes/No votes and the level of a category value? E.g.: A parliamentarian tends to vote yes on an item of business that is below a certain value in the category?

→ whatever the evaluation, it will always be an approximation because it will not be possible to go through all texts


```
5. Conclusion
```
- Dangers of being dependent on one single API
	- alternative: huggingface open source models
- Money spent on ChatGPT API / effect of paying money for an api strongly hinders / makes you pace yourself very strongly