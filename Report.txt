# Report

```
1. present an overview of the intended goals of the project and of its main features (this part may include a diagram)
```

- project goals
	- lay the foundation of my lumacss capstone project
		- what is the lumacss capstone project: they work for us website, with automatically generated content
		- make parliamentarian voting record accessible and easy to understand for voters
	- test the concept of automatically summarising and categorising parliamentarian items of business
	- create a working prototype in order to reach out to a potential project sponsor and win them over
	- using chatgpt on two different levels
		- technical support, especially creating a shiny web app, which I have no knowledge of (- ChatGPT for technical support and Shiny App: v4)
		- producing content for the web app through the OpenAI API (v3.5)

- main features
	- create a working pipeline that starts from retrieving the parliamentary data from the official parliament API and ends with a functioning web app
	- a web app as a first working prototype giving an impression of what the final lumacss capstone project could look like. the web app includes:
		- summaries of items of business
		- Classification of items of business in smart spider categories


```
2. list of tasks needed to achieve the goals and the identified technical difficulties. 
```

retrieve data through parliamentary api
- r wrapper used
- problem: lack of documentation from Parliament API
	- could be solved with [website from beni] and through trial and error

run parliamentary data through chatgpt api
- r wrapper
- restrained use of api due to “costs”
- how to query chatgpt properly to get the best results? Compare different queries in order to get the best summary
	- Shiny App: https://a88fuu-fabian-aiolfi.shinyapps.io/ChatGPT_Output_Evaluation/


```
3. review how the activities actually unfolded and the difficulties that were encountered during the project. 
```
- When querying smartvote values: Returns unstructured output which has to be converted into structured data
- when creating final web app: explaining sorting logic to chatgpt became difficult, which created lots of bugs (link to correct line in documentation)


```
4. present how the contribution/application worked out in practice, showing what has been achieved and what could not be achieved (in the latter case, identify the causes of the impossibility to achieve a feature). 
```

- Voting record with summary and smart spider category values
	- Shiny App: https://a88fuu-fabian-aiolfi.shinyapps.io/abstimmungsverhalten/

- working prototype could be set up and can be used to demonstrate what I aim at with my lumacss capstone project
- prototype shows that with relatively small amount of code and very little financial resources, a lot of content can be produced and can be displayed in an appealing manner
- the functioning shiny web app, despite its flaws and rudimentary user interface, provides a good feeling of the quality that the OpenAI API can produce

- unclear how to evaluate the output generated by the OpenAI API
	- Generated Summary
		- Which summary query was the best / most adequat?
	- Smart Spider Category Values
		- eyeball the results, sample all 8 categories
		- Is a direct comparison with current smart spider possible?
			- possible comparison: compare parliamentarian profile with with an average of their voting history? → file under possible future work
		- Is there a correlation between Yes/No votes and the level of a category value? E.g.: A parliamentarian tends to vote yes on an item of business that is below a certain value in the category?

→ whatever the evaluation, it will always be an approximation because it will not be possible to go through all texts


```
5. Conclusion
```
- Dangers of being dependent on one single API
	- alternative: huggingface open source models
- Money spent on ChatGPT API / effect of paying money for an api strongly hinders / makes you pace yourself very strongly