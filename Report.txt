# Report

## Project Goals and Main Features
This report documents the Data Mining Capstone Project (DMCP). The aim of the DMCP is to lay a foundation for my LUMACSS Capstone Project (LCP), which I intend to pursue in July and August 2023. The goal of the LCP is to create a web app that documents the voting behaviour of Swiss parliamentarians and makes their voting record understandable and accessible to the general public. The idea of the LCP is loosely based on [They Work For You](https://www.theyworkforyou.com/), a website that monitors British parliaments and aims to increase accountability for politicians in the UK.

How the LCP will display content similar to They Work For You is still to be defined. In this first attempt, the DMCP aims at performing the following two tasks: First, displaying easily understandable summaries of the individual items of business that parliamentarians vote on. Second, categorising and scoring each item of business. The DMCP lays a foundation for the LCP by testing if these tasks can be performed automatically. To limit the scope of the DMCP, this project focuses on items of business that were voted on during a final vote, in the [51st legislative period](https://de.wikipedia.org/wiki/51._Legislaturperiode_der_Schweizer_Bundesversammlung) in the National Council (the lower house of the Swiss Federal Assembly, *Nationalrat* in German). In sum, the DMCP includes 213 parliamentarians [Footnote: The National Council has 200 members. The data set includes 13 additional parliamentarians due to resignations during the 51st legislative period.] and 147 items of business.

The goal of the DMCP is to package the features described above into a working prototype in the form of a Shiny app. The prototype will then be sent to potential LCP project sponsors to better explain the project’s intent. Project sponsors are people or organisations that have an interest in the LCP’s output, e.g., the web app or the data the web app displays.

The DMCP has two main features. The first feature encompasses a complete working pipeline. The pipeline begins with retrieving raw data from the Swiss parliamentary services through the [swissparl](https://github.com/zumbov2/swissparl) R package. The end of the pipeline constitutes a [functioning Shiny web app](https://a88fuu-fabian-aiolfi.shinyapps.io/abstimmungsverhalten/) that displays summaries and scorings of items of business.

The second main feature is the use of OpenAI’s ChatGPT on two different levels. On the first level, ChatGPT was used for technical support for writing code in R. The model `GPT-4` was used through the browser interface. Snippets of code in the scripts produced by ChatGPT [are labelled appropriately](https://github.com/fabianaiolfi/Parliamentarians/blob/f55b9b01f93f87209abe9ae5a0275fe482e3b5ca/scripts/03_pre_processing.R#L11). Furthermore, ChatGPT was used to create Shiny web apps from scratch, [documented here](https://github.com/fabianaiolfi/Parliamentarians/blob/main/ChatGPT%20Conversation%20Documentation.txt). This is especially noteworthy because I have absolutely no previous knowledge of Shiny web app development and managed to create fully functioning web apps by simply prompting ChatGPT with using natural language.

The second level on which ChatGPT was employed was in the summarisation and scoring of content. To do this, the OpenAI API was used, which employs the model `gpt-3.5-turbo-0301`. The API was prompted to create a short and concise summary of the descriptions of the items of business in *[Leichter Sprache](https://en.wikipedia.org/wiki/Leichte_Sprache)*, a simplified version of the German language. Furthermore, the API was used to score each item of business based on the eight categories [Footnote: Open foreign policy, liberal economic policy, restrictive fiscal policy, law and order, restrictive migration policy, expanded environmental protection, expanded welfare state and liberal society.] used by [smartvote](https://sv19.cdn.prismic.io/sv19%2Fc76da00f-6ada-4589-9bdf-ac51d3f5d8c7_methodology_smartspider_de.pdf).

## List of Tasks and Technical Difficulties
In order to achieve the goals defined above, the following tasks are performed.

First, download of the relevant parliamentary data through the API. The R package [swissparl](https://github.com/zumbov2/swissparl) provides easy access to the API. This includes all items of business that were voted on in the Swiss National Council in the 51st legislative period. A first problem appears here due to the lack of API documentation. The browser-based tool [XOData](https://www.pragmatiqa.com/xodata/#) provides a remedy. The parliamentary services provide metadata of the API, which can be fed into XOData in order to visualise the different tables and variables accessible through the API. This overview facilitates prompting the API.

Second, clean and prepare the data in order to run it through the OpenAI API. This step includes removing HTML tags from the item of business descriptions and adding a natural language prompt that instructs the model what to output.

Third, feed the prepared data through the OpenAI API in order to retrieve the summaries and scores. The R package [rgpt3](https://github.com/ben-aaron188/rgpt3) enables easy access to the API.

Fourth, develop natural language prompts for `GPT-4`. These prompts explain to ChatGPT how the Shiny app is supposed to function, what it is meant to look like and how it should handle the available data.

## Tasks in Action and Difficulties Encountered
In short, all steps described above worked smoothly after some tweaking. There are some noteworthy points that I would like to focus on.

### Paying for the API
The OpenAI API is not free. This lead to putting in place a range of different precautions designed to prevent a cost explosion, e.g. [sampling five items of business](https://github.com/fabianaiolfi/Parliamentarians/blob/f55b9b01f93f87209abe9ae5a0275fe482e3b5ca/scripts/02_load_parl_data.R#L9) while optimising the queries. Or calculating the expected costs by [estimating the number of tokens](https://github.com/fabianaiolfi/Parliamentarians/blob/f55b9b01f93f87209abe9ae5a0275fe482e3b5ca/scripts/04_chatgpt_precautions.R#L6) being sent to OpenAI before generating summaries and scores for all items of business.

### Query Optimisation
Four different natural language queries were tested to see which one returned a suitable summary. The results of this query optimisation are presented in [this Shiny app](https://a88fuu-fabian-aiolfi.shinyapps.io/ChatGPT_Output_Evaluation/). One specific query [Footnote: “Zusammenfassung in 3 nummerierten Stichpunkten, jeweils maximal 10 Wörter, mit Verweis auf die wichtigsten Akteure in jedem Stichpunkt”] aimed at retrieving a three-point summary of the item of business, whereby the main parties involved are meant to be repeated in each bullet point. The idea behind this repetition was to create self-sufficient bullet points that could be understood independetly from each other. Here’s an example of what the three point summary should have ideally looked like:

```
1. Das Doppelbesteuerungsabkommen zwischen Armenien und der Schweiz enthält BEPS-Mindeststandards und eine Missbrauchsklausel.
2. Das Doppelbesteuerungsabkommen zwischen Armenien und der Schweiz überarbeitet die Bestimmungen über Betriebsstätten, Dividenden und Zinsen.
3. Das Doppelbesteuerungsabkommen zwischen Armenien und der Schweiz enthält eine Amtshilfeklausel für den Austausch von Informationen auf Anfrage.
```

These bullet points could then be, in a later stage, separated from each other and combined with bullet points from other items of business. These combined bullet points would allow a user of the web app to get a general impression of what a parliamentarian voted for.

The OpenAI API failed this specific task. It did not repeat the main actors in the bullet points, rendering them useless if separated. However, it did explicitly display the main actors in one or two cases, as displayed in the following output:

```
1. Erstes DBA der Schweiz mit Ostafrika
- Schweiz, Ostafrika

2. Gewährleistung von Rechtssicherheit und vorteilhafter Rahmen für Wirtschaftsbeziehungen
- Schweiz, Ostafrika

3. Berücksichtigung der Ergebnisse des OECD-Projekts BEPS gegen Gewinnverschiebungen
- Kantone, Wirtschaftsverbände
```

### Structuring Unstructured Output
The OpenAI API returns a string of characters when delivering the smartvote category scores. In order to render them in the Shiny web app and for future use, this unstructured data had to be converted to [structured data](https://github.com/fabianaiolfi/Parliamentarians/blob/313ea51762ce0c6d657ef5e22afe78960cb4c85c/scripts/06_post_processing.R#L48-L53). While this code snippet is trivial, it is important to point out that it is not futureproof. Depending on how the GPT model changes in future versions, the model’s output may change, whereby the code snippet has to be adjusted too.

### Complex Shiny App
ChatGPT had difficulties understanding the more complex features that were added to the final Shiny web app. These difficulties are documented [here](https://github.com/fabianaiolfi/Parliamentarians/blob/313ea51762ce0c6d657ef5e22afe78960cb4c85c/ChatGPT%20Conversation%20Documentation.txt#L1107-L1779). I assume there to be two reasons why the Shiny app code failed to work. First, the natural language queries were probably too unclear. Second, the entire code for the web app was becoming so long that ChatGPT could not return the entire code in one go. This problem was solved by tirelessly prompting ChatGPT until the web app functioned.

## Final Project Output and Next Steps

The DMCP’s final output is a prototype in the form of [Shiny web app](https://a88fuu-fabian-aiolfi.shinyapps.io/abstimmungsverhalten/). The working prototype lays the foundation for the LCP and shows how this can be achieved with a relatively small amount of code, no prior knowledge of Shiny app development and very little financial resources. The prototype, despite its flaws and rudimentary user interface, provides a good feeling of the quality that the OpenAI API can produce.

The web app displays a parliamentarian’s vote record between 2020 and 2023. Each item of business is displayed by its title, a short summary and a score for different smartvote categories. A smartvote category is only included if the model returned a score for a category.

The web app allows the user to pick a parliamentarian using the “Parlamentarier:in auswählen” dropdown on the left. By default, the parliamentarian’s full voting record is displayed as a list. The user can then filter this list by picking one of the eight smartvote categories in a second dropdown beneth the first. Selecting a category filters the voting record, only displaying items of business that include a score in the chosen category. Furthermore, the list is then sorted by the category’s score in descending order, placing items of business with high scores at the top of the list.

What the score actually means is up to debate and leads into the discussion of evaluating the model’s output. This evaluation was not in the scope of the DMCP, but will be necessary for the LCP.

How good are the summaries? How adequat are the scores? These questions are essential in the further development of this project. Evaluating the summaries could be done by having three or four people rate a sample of summaries and then measuring the inter-rater reliability using *‌Cohen's kappa*. A more experimental approach would be to place the items of business and the summaries in vector space and measure their corresponding distances. This could help evaluate if there are summaries that capture more or less of the item of business’ content.

Evaluating the smartvote category scores requires an in-depth study of the [smartvote methodology](https://sv19.cdn.prismic.io/sv19%2Fc76da00f-6ada-4589-9bdf-ac51d3f5d8c7_methodology_smartspider_de.pdf). One possible direction of the evaluation could be to examine if there is a correlation between a parliamentarian’s voting record and a category’s score. E.g., does a parliamentarian always vote yes on items of business with a high Law & Order score?

## Conclusion
This project shows that using the technology provided by OpenAI has massive benefits and has allowed me to achieve outputs that were previously not possible for me. However, relying on a single piece of technology provided by a closed-source, privately held company has its flaws. The further development of this project would come to a screeching halt if the API were no longer available, or, more realistically, suddenly became financially unaffordable. Open source models, as provided by [Huggingface](https://huggingface.co/), should be considered as possible alternatives or at least backup options.